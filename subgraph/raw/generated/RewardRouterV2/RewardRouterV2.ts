// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class StakeAlp extends ethereum.Event {
  get params(): StakeAlp__Params {
    return new StakeAlp__Params(this);
  }
}

export class StakeAlp__Params {
  _event: StakeAlp;

  constructor(event: StakeAlp) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeAxn extends ethereum.Event {
  get params(): StakeAxn__Params {
    return new StakeAxn__Params(this);
  }
}

export class StakeAxn__Params {
  _event: StakeAxn;

  constructor(event: StakeAxn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnstakeAlp extends ethereum.Event {
  get params(): UnstakeAlp__Params {
    return new UnstakeAlp__Params(this);
  }
}

export class UnstakeAlp__Params {
  _event: UnstakeAlp;

  constructor(event: UnstakeAlp) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UnstakeAxn extends ethereum.Event {
  get params(): UnstakeAxn__Params {
    return new UnstakeAxn__Params(this);
  }
}

export class UnstakeAxn__Params {
  _event: UnstakeAxn;

  constructor(event: UnstakeAxn) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardRouterV2 extends ethereum.SmartContract {
  static bind(address: Address): RewardRouterV2 {
    return new RewardRouterV2("RewardRouterV2", address);
  }

  alp(): Address {
    let result = super.call("alp", "alp():(address)", []);

    return result[0].toAddress();
  }

  try_alp(): ethereum.CallResult<Address> {
    let result = super.tryCall("alp", "alp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  alpManager(): Address {
    let result = super.call("alpManager", "alpManager():(address)", []);

    return result[0].toAddress();
  }

  try_alpManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("alpManager", "alpManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  alpVester(): Address {
    let result = super.call("alpVester", "alpVester():(address)", []);

    return result[0].toAddress();
  }

  try_alpVester(): ethereum.CallResult<Address> {
    let result = super.tryCall("alpVester", "alpVester():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  axn(): Address {
    let result = super.call("axn", "axn():(address)", []);

    return result[0].toAddress();
  }

  try_axn(): ethereum.CallResult<Address> {
    let result = super.tryCall("axn", "axn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  axnVester(): Address {
    let result = super.call("axnVester", "axnVester():(address)", []);

    return result[0].toAddress();
  }

  try_axnVester(): ethereum.CallResult<Address> {
    let result = super.tryCall("axnVester", "axnVester():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bnAxn(): Address {
    let result = super.call("bnAxn", "bnAxn():(address)", []);

    return result[0].toAddress();
  }

  try_bnAxn(): ethereum.CallResult<Address> {
    let result = super.tryCall("bnAxn", "bnAxn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bonusAxnTracker(): Address {
    let result = super.call(
      "bonusAxnTracker",
      "bonusAxnTracker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_bonusAxnTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bonusAxnTracker",
      "bonusAxnTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  esAxn(): Address {
    let result = super.call("esAxn", "esAxn():(address)", []);

    return result[0].toAddress();
  }

  try_esAxn(): ethereum.CallResult<Address> {
    let result = super.tryCall("esAxn", "esAxn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeAlpTracker(): Address {
    let result = super.call("feeAlpTracker", "feeAlpTracker():(address)", []);

    return result[0].toAddress();
  }

  try_feeAlpTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeAlpTracker",
      "feeAlpTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeAxnTracker(): Address {
    let result = super.call("feeAxnTracker", "feeAxnTracker():(address)", []);

    return result[0].toAddress();
  }

  try_feeAxnTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeAxnTracker",
      "feeAxnTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintAndStakeAlp(
    _token: Address,
    _amount: BigInt,
    _minUsdg: BigInt,
    _minAlp: BigInt
  ): BigInt {
    let result = super.call(
      "mintAndStakeAlp",
      "mintAndStakeAlp(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minUsdg),
        ethereum.Value.fromUnsignedBigInt(_minAlp)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintAndStakeAlp(
    _token: Address,
    _amount: BigInt,
    _minUsdg: BigInt,
    _minAlp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAndStakeAlp",
      "mintAndStakeAlp(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minUsdg),
        ethereum.Value.fromUnsignedBigInt(_minAlp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingReceivers(param0: Address): Address {
    let result = super.call(
      "pendingReceivers",
      "pendingReceivers(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_pendingReceivers(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingReceivers",
      "pendingReceivers(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedAlpTracker(): Address {
    let result = super.call(
      "stakedAlpTracker",
      "stakedAlpTracker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakedAlpTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakedAlpTracker",
      "stakedAlpTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakedAxnTracker(): Address {
    let result = super.call(
      "stakedAxnTracker",
      "stakedAxnTracker():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakedAxnTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakedAxnTracker",
      "stakedAxnTracker():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unstakeAndRedeemAlp(
    _tokenOut: Address,
    _alpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "unstakeAndRedeemAlp",
      "unstakeAndRedeemAlp(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_alpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_unstakeAndRedeemAlp(
    _tokenOut: Address,
    _alpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeAndRedeemAlp",
      "unstakeAndRedeemAlp(address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_alpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unstakeAndRedeemAlpETH(
    _alpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address
  ): BigInt {
    let result = super.call(
      "unstakeAndRedeemAlpETH",
      "unstakeAndRedeemAlpETH(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_alpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver)
      ]
    );

    return result[0].toBigInt();
  }

  try_unstakeAndRedeemAlpETH(
    _alpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unstakeAndRedeemAlpETH",
      "unstakeAndRedeemAlpETH(uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_alpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AcceptTransferCall extends ethereum.Call {
  get inputs(): AcceptTransferCall__Inputs {
    return new AcceptTransferCall__Inputs(this);
  }

  get outputs(): AcceptTransferCall__Outputs {
    return new AcceptTransferCall__Outputs(this);
  }
}

export class AcceptTransferCall__Inputs {
  _call: AcceptTransferCall;

  constructor(call: AcceptTransferCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AcceptTransferCall__Outputs {
  _call: AcceptTransferCall;

  constructor(call: AcceptTransferCall) {
    this._call = call;
  }
}

export class BatchCompoundForAccountsCall extends ethereum.Call {
  get inputs(): BatchCompoundForAccountsCall__Inputs {
    return new BatchCompoundForAccountsCall__Inputs(this);
  }

  get outputs(): BatchCompoundForAccountsCall__Outputs {
    return new BatchCompoundForAccountsCall__Outputs(this);
  }
}

export class BatchCompoundForAccountsCall__Inputs {
  _call: BatchCompoundForAccountsCall;

  constructor(call: BatchCompoundForAccountsCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class BatchCompoundForAccountsCall__Outputs {
  _call: BatchCompoundForAccountsCall;

  constructor(call: BatchCompoundForAccountsCall) {
    this._call = call;
  }
}

export class BatchStakeAxnForAccountCall extends ethereum.Call {
  get inputs(): BatchStakeAxnForAccountCall__Inputs {
    return new BatchStakeAxnForAccountCall__Inputs(this);
  }

  get outputs(): BatchStakeAxnForAccountCall__Outputs {
    return new BatchStakeAxnForAccountCall__Outputs(this);
  }
}

export class BatchStakeAxnForAccountCall__Inputs {
  _call: BatchStakeAxnForAccountCall;

  constructor(call: BatchStakeAxnForAccountCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BatchStakeAxnForAccountCall__Outputs {
  _call: BatchStakeAxnForAccountCall;

  constructor(call: BatchStakeAxnForAccountCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimEsAxnCall extends ethereum.Call {
  get inputs(): ClaimEsAxnCall__Inputs {
    return new ClaimEsAxnCall__Inputs(this);
  }

  get outputs(): ClaimEsAxnCall__Outputs {
    return new ClaimEsAxnCall__Outputs(this);
  }
}

export class ClaimEsAxnCall__Inputs {
  _call: ClaimEsAxnCall;

  constructor(call: ClaimEsAxnCall) {
    this._call = call;
  }
}

export class ClaimEsAxnCall__Outputs {
  _call: ClaimEsAxnCall;

  constructor(call: ClaimEsAxnCall) {
    this._call = call;
  }
}

export class ClaimFeesCall extends ethereum.Call {
  get inputs(): ClaimFeesCall__Inputs {
    return new ClaimFeesCall__Inputs(this);
  }

  get outputs(): ClaimFeesCall__Outputs {
    return new ClaimFeesCall__Outputs(this);
  }
}

export class ClaimFeesCall__Inputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class ClaimFeesCall__Outputs {
  _call: ClaimFeesCall;

  constructor(call: ClaimFeesCall) {
    this._call = call;
  }
}

export class CompoundCall extends ethereum.Call {
  get inputs(): CompoundCall__Inputs {
    return new CompoundCall__Inputs(this);
  }

  get outputs(): CompoundCall__Outputs {
    return new CompoundCall__Outputs(this);
  }
}

export class CompoundCall__Inputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class CompoundCall__Outputs {
  _call: CompoundCall;

  constructor(call: CompoundCall) {
    this._call = call;
  }
}

export class CompoundForAccountCall extends ethereum.Call {
  get inputs(): CompoundForAccountCall__Inputs {
    return new CompoundForAccountCall__Inputs(this);
  }

  get outputs(): CompoundForAccountCall__Outputs {
    return new CompoundForAccountCall__Outputs(this);
  }
}

export class CompoundForAccountCall__Inputs {
  _call: CompoundForAccountCall;

  constructor(call: CompoundForAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CompoundForAccountCall__Outputs {
  _call: CompoundForAccountCall;

  constructor(call: CompoundForAccountCall) {
    this._call = call;
  }
}

export class HandleRewardsCall extends ethereum.Call {
  get inputs(): HandleRewardsCall__Inputs {
    return new HandleRewardsCall__Inputs(this);
  }

  get outputs(): HandleRewardsCall__Outputs {
    return new HandleRewardsCall__Outputs(this);
  }
}

export class HandleRewardsCall__Inputs {
  _call: HandleRewardsCall;

  constructor(call: HandleRewardsCall) {
    this._call = call;
  }

  get _shouldClaimAxn(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _shouldStakeAxn(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _shouldClaimEsAxn(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _shouldStakeEsAxn(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _shouldStakeMultiplierPoints(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _shouldClaimWeth(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _shouldConvertWethToEth(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class HandleRewardsCall__Outputs {
  _call: HandleRewardsCall;

  constructor(call: HandleRewardsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _weth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _axn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _esAxn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _bnAxn(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _alp(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _stakedAxnTracker(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _bonusAxnTracker(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _feeAxnTracker(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _feeAlpTracker(): Address {
    return this._call.inputValues[8].value.toAddress();
  }

  get _stakedAlpTracker(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _alpManager(): Address {
    return this._call.inputValues[10].value.toAddress();
  }

  get _axnVester(): Address {
    return this._call.inputValues[11].value.toAddress();
  }

  get _alpVester(): Address {
    return this._call.inputValues[12].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintAndStakeAlpCall extends ethereum.Call {
  get inputs(): MintAndStakeAlpCall__Inputs {
    return new MintAndStakeAlpCall__Inputs(this);
  }

  get outputs(): MintAndStakeAlpCall__Outputs {
    return new MintAndStakeAlpCall__Outputs(this);
  }
}

export class MintAndStakeAlpCall__Inputs {
  _call: MintAndStakeAlpCall;

  constructor(call: MintAndStakeAlpCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minUsdg(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minAlp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintAndStakeAlpCall__Outputs {
  _call: MintAndStakeAlpCall;

  constructor(call: MintAndStakeAlpCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintAndStakeAlpETHCall extends ethereum.Call {
  get inputs(): MintAndStakeAlpETHCall__Inputs {
    return new MintAndStakeAlpETHCall__Inputs(this);
  }

  get outputs(): MintAndStakeAlpETHCall__Outputs {
    return new MintAndStakeAlpETHCall__Outputs(this);
  }
}

export class MintAndStakeAlpETHCall__Inputs {
  _call: MintAndStakeAlpETHCall;

  constructor(call: MintAndStakeAlpETHCall) {
    this._call = call;
  }

  get _minUsdg(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minAlp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintAndStakeAlpETHCall__Outputs {
  _call: MintAndStakeAlpETHCall;

  constructor(call: MintAndStakeAlpETHCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SignalTransferCall extends ethereum.Call {
  get inputs(): SignalTransferCall__Inputs {
    return new SignalTransferCall__Inputs(this);
  }

  get outputs(): SignalTransferCall__Outputs {
    return new SignalTransferCall__Outputs(this);
  }
}

export class SignalTransferCall__Inputs {
  _call: SignalTransferCall;

  constructor(call: SignalTransferCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SignalTransferCall__Outputs {
  _call: SignalTransferCall;

  constructor(call: SignalTransferCall) {
    this._call = call;
  }
}

export class StakeAxnCall extends ethereum.Call {
  get inputs(): StakeAxnCall__Inputs {
    return new StakeAxnCall__Inputs(this);
  }

  get outputs(): StakeAxnCall__Outputs {
    return new StakeAxnCall__Outputs(this);
  }
}

export class StakeAxnCall__Inputs {
  _call: StakeAxnCall;

  constructor(call: StakeAxnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeAxnCall__Outputs {
  _call: StakeAxnCall;

  constructor(call: StakeAxnCall) {
    this._call = call;
  }
}

export class StakeAxnForAccountCall extends ethereum.Call {
  get inputs(): StakeAxnForAccountCall__Inputs {
    return new StakeAxnForAccountCall__Inputs(this);
  }

  get outputs(): StakeAxnForAccountCall__Outputs {
    return new StakeAxnForAccountCall__Outputs(this);
  }
}

export class StakeAxnForAccountCall__Inputs {
  _call: StakeAxnForAccountCall;

  constructor(call: StakeAxnForAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StakeAxnForAccountCall__Outputs {
  _call: StakeAxnForAccountCall;

  constructor(call: StakeAxnForAccountCall) {
    this._call = call;
  }
}

export class StakeEsAxnCall extends ethereum.Call {
  get inputs(): StakeEsAxnCall__Inputs {
    return new StakeEsAxnCall__Inputs(this);
  }

  get outputs(): StakeEsAxnCall__Outputs {
    return new StakeEsAxnCall__Outputs(this);
  }
}

export class StakeEsAxnCall__Inputs {
  _call: StakeEsAxnCall;

  constructor(call: StakeEsAxnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeEsAxnCall__Outputs {
  _call: StakeEsAxnCall;

  constructor(call: StakeEsAxnCall) {
    this._call = call;
  }
}

export class UnstakeAndRedeemAlpCall extends ethereum.Call {
  get inputs(): UnstakeAndRedeemAlpCall__Inputs {
    return new UnstakeAndRedeemAlpCall__Inputs(this);
  }

  get outputs(): UnstakeAndRedeemAlpCall__Outputs {
    return new UnstakeAndRedeemAlpCall__Outputs(this);
  }
}

export class UnstakeAndRedeemAlpCall__Inputs {
  _call: UnstakeAndRedeemAlpCall;

  constructor(call: UnstakeAndRedeemAlpCall) {
    this._call = call;
  }

  get _tokenOut(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _alpAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class UnstakeAndRedeemAlpCall__Outputs {
  _call: UnstakeAndRedeemAlpCall;

  constructor(call: UnstakeAndRedeemAlpCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnstakeAndRedeemAlpETHCall extends ethereum.Call {
  get inputs(): UnstakeAndRedeemAlpETHCall__Inputs {
    return new UnstakeAndRedeemAlpETHCall__Inputs(this);
  }

  get outputs(): UnstakeAndRedeemAlpETHCall__Outputs {
    return new UnstakeAndRedeemAlpETHCall__Outputs(this);
  }
}

export class UnstakeAndRedeemAlpETHCall__Inputs {
  _call: UnstakeAndRedeemAlpETHCall;

  constructor(call: UnstakeAndRedeemAlpETHCall) {
    this._call = call;
  }

  get _alpAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UnstakeAndRedeemAlpETHCall__Outputs {
  _call: UnstakeAndRedeemAlpETHCall;

  constructor(call: UnstakeAndRedeemAlpETHCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnstakeAxnCall extends ethereum.Call {
  get inputs(): UnstakeAxnCall__Inputs {
    return new UnstakeAxnCall__Inputs(this);
  }

  get outputs(): UnstakeAxnCall__Outputs {
    return new UnstakeAxnCall__Outputs(this);
  }
}

export class UnstakeAxnCall__Inputs {
  _call: UnstakeAxnCall;

  constructor(call: UnstakeAxnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeAxnCall__Outputs {
  _call: UnstakeAxnCall;

  constructor(call: UnstakeAxnCall) {
    this._call = call;
  }
}

export class UnstakeEsAxnCall extends ethereum.Call {
  get inputs(): UnstakeEsAxnCall__Inputs {
    return new UnstakeEsAxnCall__Inputs(this);
  }

  get outputs(): UnstakeEsAxnCall__Outputs {
    return new UnstakeEsAxnCall__Outputs(this);
  }
}

export class UnstakeEsAxnCall__Inputs {
  _call: UnstakeEsAxnCall;

  constructor(call: UnstakeEsAxnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnstakeEsAxnCall__Outputs {
  _call: UnstakeEsAxnCall;

  constructor(call: UnstakeEsAxnCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
