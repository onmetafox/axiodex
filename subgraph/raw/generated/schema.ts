// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionIndex(): i32 {
    let value = this.get("transactionIndex");
    return value.toI32();
  }

  set transactionIndex(value: i32) {
    this.set("transactionIndex", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class StakeAxn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakeAxn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeAxn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeAxn", id.toString(), this);
  }

  static load(id: string): StakeAxn | null {
    return store.get("StakeAxn", id) as StakeAxn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UnstakeAxn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnstakeAxn entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnstakeAxn entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnstakeAxn", id.toString(), this);
  }

  static load(id: string): UnstakeAxn | null {
    return store.get("UnstakeAxn", id) as UnstakeAxn | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class StakeAlp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save StakeAlp entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StakeAlp entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StakeAlp", id.toString(), this);
  }

  static load(id: string): StakeAlp | null {
    return store.get("StakeAlp", id) as StakeAlp | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UnstakeAlp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UnstakeAlp entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UnstakeAlp entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UnstakeAlp", id.toString(), this);
  }

  static load(id: string): UnstakeAlp | null {
    return store.get("UnstakeAlp", id) as UnstakeAlp | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class CollectMarginFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollectMarginFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollectMarginFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollectMarginFee", id.toString(), this);
  }

  static load(id: string): CollectMarginFee | null {
    return store.get("CollectMarginFee", id) as CollectMarginFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get feeUsd(): BigInt {
    let value = this.get("feeUsd");
    return value.toBigInt();
  }

  set feeUsd(value: BigInt) {
    this.set("feeUsd", Value.fromBigInt(value));
  }

  get feeTokens(): BigInt {
    let value = this.get("feeTokens");
    return value.toBigInt();
  }

  set feeTokens(value: BigInt) {
    this.set("feeTokens", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class CollectSwapFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CollectSwapFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CollectSwapFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CollectSwapFee", id.toString(), this);
  }

  static load(id: string): CollectSwapFee | null {
    return store.get("CollectSwapFee", id) as CollectSwapFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get feeUsd(): BigInt {
    let value = this.get("feeUsd");
    return value.toBigInt();
  }

  set feeUsd(value: BigInt) {
    this.set("feeUsd", Value.fromBigInt(value));
  }

  get feeTokens(): BigInt {
    let value = this.get("feeTokens");
    return value.toBigInt();
  }

  set feeTokens(value: BigInt) {
    this.set("feeTokens", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class ClosePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ClosePosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ClosePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ClosePosition", id.toString(), this);
  }

  static load(id: string): ClosePosition | null {
    return store.get("ClosePosition", id) as ClosePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }

  get entryFundingRate(): BigInt {
    let value = this.get("entryFundingRate");
    return value.toBigInt();
  }

  set entryFundingRate(value: BigInt) {
    this.set("entryFundingRate", Value.fromBigInt(value));
  }

  get reserveAmount(): BigInt {
    let value = this.get("reserveAmount");
    return value.toBigInt();
  }

  set reserveAmount(value: BigInt) {
    this.set("reserveAmount", Value.fromBigInt(value));
  }

  get realisedPnl(): BigInt {
    let value = this.get("realisedPnl");
    return value.toBigInt();
  }

  set realisedPnl(value: BigInt) {
    this.set("realisedPnl", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class LiquidatePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidatePosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidatePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidatePosition", id.toString(), this);
  }

  static load(id: string): LiquidatePosition | null {
    return store.get("LiquidatePosition", id) as LiquidatePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get reserveAmount(): BigInt {
    let value = this.get("reserveAmount");
    return value.toBigInt();
  }

  set reserveAmount(value: BigInt) {
    this.set("reserveAmount", Value.fromBigInt(value));
  }

  get realisedPnl(): BigInt {
    let value = this.get("realisedPnl");
    return value.toBigInt();
  }

  set realisedPnl(value: BigInt) {
    this.set("realisedPnl", Value.fromBigInt(value));
  }

  get markPrice(): BigInt {
    let value = this.get("markPrice");
    return value.toBigInt();
  }

  set markPrice(value: BigInt) {
    this.set("markPrice", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class CreateIncreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CreateIncreasePosition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreateIncreasePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreateIncreasePosition", id.toString(), this);
  }

  static load(id: string): CreateIncreasePosition | null {
    return store.get(
      "CreateIncreasePosition",
      id
    ) as CreateIncreasePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get acceptablePrice(): BigInt {
    let value = this.get("acceptablePrice");
    return value.toBigInt();
  }

  set acceptablePrice(value: BigInt) {
    this.set("acceptablePrice", Value.fromBigInt(value));
  }

  get executionFee(): BigInt {
    let value = this.get("executionFee");
    return value.toBigInt();
  }

  set executionFee(value: BigInt) {
    this.set("executionFee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class CreateDecreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save CreateDecreasePosition entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreateDecreasePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreateDecreasePosition", id.toString(), this);
  }

  static load(id: string): CreateDecreasePosition | null {
    return store.get(
      "CreateDecreasePosition",
      id
    ) as CreateDecreasePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get acceptablePrice(): BigInt {
    let value = this.get("acceptablePrice");
    return value.toBigInt();
  }

  set acceptablePrice(value: BigInt) {
    this.set("acceptablePrice", Value.fromBigInt(value));
  }

  get executionFee(): BigInt {
    let value = this.get("executionFee");
    return value.toBigInt();
  }

  set executionFee(value: BigInt) {
    this.set("executionFee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class IncreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IncreasePosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IncreasePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IncreasePosition", id.toString(), this);
  }

  static load(id: string): IncreasePosition | null {
    return store.get("IncreasePosition", id) as IncreasePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class DecreasePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DecreasePosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DecreasePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DecreasePosition", id.toString(), this);
  }

  static load(id: string): DecreasePosition | null {
    return store.get("DecreasePosition", id) as DecreasePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get collateralDelta(): BigInt {
    let value = this.get("collateralDelta");
    return value.toBigInt();
  }

  set collateralDelta(value: BigInt) {
    this.set("collateralDelta", Value.fromBigInt(value));
  }

  get sizeDelta(): BigInt {
    let value = this.get("sizeDelta");
    return value.toBigInt();
  }

  set sizeDelta(value: BigInt) {
    this.set("sizeDelta", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get logIndex(): i32 {
    let value = this.get("logIndex");
    return value.toI32();
  }

  set logIndex(value: i32) {
    this.set("logIndex", Value.fromI32(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class AddLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AddLiquidity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AddLiquidity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AddLiquidity", id.toString(), this);
  }

  static load(id: string): AddLiquidity | null {
    return store.get("AddLiquidity", id) as AddLiquidity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }

  get alpSupply(): BigInt {
    let value = this.get("alpSupply");
    return value.toBigInt();
  }

  set alpSupply(value: BigInt) {
    this.set("alpSupply", Value.fromBigInt(value));
  }

  get usdgAmount(): BigInt {
    let value = this.get("usdgAmount");
    return value.toBigInt();
  }

  set usdgAmount(value: BigInt) {
    this.set("usdgAmount", Value.fromBigInt(value));
  }

  get mintAmount(): BigInt {
    let value = this.get("mintAmount");
    return value.toBigInt();
  }

  set mintAmount(value: BigInt) {
    this.set("mintAmount", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class RemoveLiquidity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RemoveLiquidity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RemoveLiquidity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RemoveLiquidity", id.toString(), this);
  }

  static load(id: string): RemoveLiquidity | null {
    return store.get("RemoveLiquidity", id) as RemoveLiquidity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get alpAmount(): BigInt {
    let value = this.get("alpAmount");
    return value.toBigInt();
  }

  set alpAmount(value: BigInt) {
    this.set("alpAmount", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }

  get alpSupply(): BigInt {
    let value = this.get("alpSupply");
    return value.toBigInt();
  }

  set alpSupply(value: BigInt) {
    this.set("alpSupply", Value.fromBigInt(value));
  }

  get usdgAmount(): BigInt {
    let value = this.get("usdgAmount");
    return value.toBigInt();
  }

  set usdgAmount(value: BigInt) {
    this.set("usdgAmount", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get amountOutAfterFees(): BigInt {
    let value = this.get("amountOutAfterFees");
    return value.toBigInt();
  }

  set amountOutAfterFees(value: BigInt) {
    this.set("amountOutAfterFees", Value.fromBigInt(value));
  }

  get feeBasisPoints(): BigInt {
    let value = this.get("feeBasisPoints");
    return value.toBigInt();
  }

  set feeBasisPoints(value: BigInt) {
    this.set("feeBasisPoints", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}
