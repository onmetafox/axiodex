// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WhitelistedToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WhitelistedToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WhitelistedToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WhitelistedToken", id.toString(), this);
  }

  static load(id: string): WhitelistedToken | null {
    return store.get("WhitelistedToken", id) as WhitelistedToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get foo(): string {
    let value = this.get("foo");
    return value.toString();
  }

  set foo(value: string) {
    this.set("foo", Value.fromString(value));
  }
}

export class TokenStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenStat", id.toString(), this);
  }

  static load(id: string): TokenStat | null {
    return store.get("TokenStat", id) as TokenStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get poolAmount(): BigInt {
    let value = this.get("poolAmount");
    return value.toBigInt();
  }

  set poolAmount(value: BigInt) {
    this.set("poolAmount", Value.fromBigInt(value));
  }

  get poolAmountUsd(): BigInt {
    let value = this.get("poolAmountUsd");
    return value.toBigInt();
  }

  set poolAmountUsd(value: BigInt) {
    this.set("poolAmountUsd", Value.fromBigInt(value));
  }

  get usdgAmount(): BigInt {
    let value = this.get("usdgAmount");
    return value.toBigInt();
  }

  set usdgAmount(value: BigInt) {
    this.set("usdgAmount", Value.fromBigInt(value));
  }

  get reservedAmount(): BigInt {
    let value = this.get("reservedAmount");
    return value.toBigInt();
  }

  set reservedAmount(value: BigInt) {
    this.set("reservedAmount", Value.fromBigInt(value));
  }

  get reservedAmountUsd(): BigInt {
    let value = this.get("reservedAmountUsd");
    return value.toBigInt();
  }

  set reservedAmountUsd(value: BigInt) {
    this.set("reservedAmountUsd", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class ActivePosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ActivePosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ActivePosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ActivePosition", id.toString(), this);
  }

  static load(id: string): ActivePosition | null {
    return store.get("ActivePosition", id) as ActivePosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }

  get entryFundingRate(): BigInt {
    let value = this.get("entryFundingRate");
    return value.toBigInt();
  }

  set entryFundingRate(value: BigInt) {
    this.set("entryFundingRate", Value.fromBigInt(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get markPrice(): BigInt {
    let value = this.get("markPrice");
    return value.toBigInt();
  }

  set markPrice(value: BigInt) {
    this.set("markPrice", Value.fromBigInt(value));
  }
}

export class LiquidatedPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save LiquidatedPosition entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidatedPosition entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidatedPosition", id.toString(), this);
  }

  static load(id: string): LiquidatedPosition | null {
    return store.get("LiquidatedPosition", id) as LiquidatedPosition | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string {
    let value = this.get("key");
    return value.toString();
  }

  set key(value: string) {
    this.set("key", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get indexToken(): string {
    let value = this.get("indexToken");
    return value.toString();
  }

  set indexToken(value: string) {
    this.set("indexToken", Value.fromString(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get collateralToken(): string {
    let value = this.get("collateralToken");
    return value.toString();
  }

  set collateralToken(value: string) {
    this.set("collateralToken", Value.fromString(value));
  }

  get collateral(): BigInt {
    let value = this.get("collateral");
    return value.toBigInt();
  }

  set collateral(value: BigInt) {
    this.set("collateral", Value.fromBigInt(value));
  }

  get markPrice(): BigInt {
    let value = this.get("markPrice");
    return value.toBigInt();
  }

  set markPrice(value: BigInt) {
    this.set("markPrice", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    return value.toBigInt();
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }

  get loss(): BigInt {
    let value = this.get("loss");
    return value.toBigInt();
  }

  set loss(value: BigInt) {
    this.set("loss", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get borrowFee(): BigInt {
    let value = this.get("borrowFee");
    return value.toBigInt();
  }

  set borrowFee(value: BigInt) {
    this.set("borrowFee", Value.fromBigInt(value));
  }
}

export class ChainlinkPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ChainlinkPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ChainlinkPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ChainlinkPrice", id.toString(), this);
  }

  static load(id: string): ChainlinkPrice | null {
    return store.get("ChainlinkPrice", id) as ChainlinkPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class UniswapPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UniswapPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UniswapPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UniswapPrice", id.toString(), this);
  }

  static load(id: string): UniswapPrice | null {
    return store.get("UniswapPrice", id) as UniswapPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class FastPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FastPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FastPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FastPrice", id.toString(), this);
  }

  static load(id: string): FastPrice | null {
    return store.get("FastPrice", id) as FastPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class FundingRate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FundingRate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FundingRate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FundingRate", id.toString(), this);
  }

  static load(id: string): FundingRate | null {
    return store.get("FundingRate", id) as FundingRate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startFundingRate(): i32 {
    let value = this.get("startFundingRate");
    return value.toI32();
  }

  set startFundingRate(value: i32) {
    this.set("startFundingRate", Value.fromI32(value));
  }

  get startTimestamp(): i32 {
    let value = this.get("startTimestamp");
    return value.toI32();
  }

  set startTimestamp(value: i32) {
    this.set("startTimestamp", Value.fromI32(value));
  }

  get endFundingRate(): i32 {
    let value = this.get("endFundingRate");
    return value.toI32();
  }

  set endFundingRate(value: i32) {
    this.set("endFundingRate", Value.fromI32(value));
  }

  get endTimestamp(): i32 {
    let value = this.get("endTimestamp");
    return value.toI32();
  }

  set endTimestamp(value: i32) {
    this.set("endTimestamp", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class TradingStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TradingStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TradingStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TradingStat", id.toString(), this);
  }

  static load(id: string): TradingStat | null {
    return store.get("TradingStat", id) as TradingStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profit(): BigInt {
    let value = this.get("profit");
    return value.toBigInt();
  }

  set profit(value: BigInt) {
    this.set("profit", Value.fromBigInt(value));
  }

  get loss(): BigInt {
    let value = this.get("loss");
    return value.toBigInt();
  }

  set loss(value: BigInt) {
    this.set("loss", Value.fromBigInt(value));
  }

  get profitCumulative(): BigInt {
    let value = this.get("profitCumulative");
    return value.toBigInt();
  }

  set profitCumulative(value: BigInt) {
    this.set("profitCumulative", Value.fromBigInt(value));
  }

  get lossCumulative(): BigInt {
    let value = this.get("lossCumulative");
    return value.toBigInt();
  }

  set lossCumulative(value: BigInt) {
    this.set("lossCumulative", Value.fromBigInt(value));
  }

  get longOpenInterest(): BigInt {
    let value = this.get("longOpenInterest");
    return value.toBigInt();
  }

  set longOpenInterest(value: BigInt) {
    this.set("longOpenInterest", Value.fromBigInt(value));
  }

  get shortOpenInterest(): BigInt {
    let value = this.get("shortOpenInterest");
    return value.toBigInt();
  }

  set shortOpenInterest(value: BigInt) {
    this.set("shortOpenInterest", Value.fromBigInt(value));
  }

  get liquidatedCollateral(): BigInt {
    let value = this.get("liquidatedCollateral");
    return value.toBigInt();
  }

  set liquidatedCollateral(value: BigInt) {
    this.set("liquidatedCollateral", Value.fromBigInt(value));
  }

  get liquidatedCollateralCumulative(): BigInt {
    let value = this.get("liquidatedCollateralCumulative");
    return value.toBigInt();
  }

  set liquidatedCollateralCumulative(value: BigInt) {
    this.set("liquidatedCollateralCumulative", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Order entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Order entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Order", id.toString(), this);
  }

  static load(id: string): Order | null {
    return store.get("Order", id) as Order | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get index(): BigInt {
    let value = this.get("index");
    return value.toBigInt();
  }

  set index(value: BigInt) {
    this.set("index", Value.fromBigInt(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get createdTimestamp(): i32 {
    let value = this.get("createdTimestamp");
    return value.toI32();
  }

  set createdTimestamp(value: i32) {
    this.set("createdTimestamp", Value.fromI32(value));
  }

  get cancelledTimestamp(): i32 {
    let value = this.get("cancelledTimestamp");
    return value.toI32();
  }

  set cancelledTimestamp(value: i32) {
    this.set("cancelledTimestamp", Value.fromI32(value));
  }

  get executedTimestamp(): i32 {
    let value = this.get("executedTimestamp");
    return value.toI32();
  }

  set executedTimestamp(value: i32) {
    this.set("executedTimestamp", Value.fromI32(value));
  }
}

export class OrderStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OrderStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OrderStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OrderStat", id.toString(), this);
  }

  static load(id: string): OrderStat | null {
    return store.get("OrderStat", id) as OrderStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get openSwap(): i32 {
    let value = this.get("openSwap");
    return value.toI32();
  }

  set openSwap(value: i32) {
    this.set("openSwap", Value.fromI32(value));
  }

  get openIncrease(): i32 {
    let value = this.get("openIncrease");
    return value.toI32();
  }

  set openIncrease(value: i32) {
    this.set("openIncrease", Value.fromI32(value));
  }

  get openDecrease(): i32 {
    let value = this.get("openDecrease");
    return value.toI32();
  }

  set openDecrease(value: i32) {
    this.set("openDecrease", Value.fromI32(value));
  }

  get cancelledSwap(): i32 {
    let value = this.get("cancelledSwap");
    return value.toI32();
  }

  set cancelledSwap(value: i32) {
    this.set("cancelledSwap", Value.fromI32(value));
  }

  get cancelledIncrease(): i32 {
    let value = this.get("cancelledIncrease");
    return value.toI32();
  }

  set cancelledIncrease(value: i32) {
    this.set("cancelledIncrease", Value.fromI32(value));
  }

  get cancelledDecrease(): i32 {
    let value = this.get("cancelledDecrease");
    return value.toI32();
  }

  set cancelledDecrease(value: i32) {
    this.set("cancelledDecrease", Value.fromI32(value));
  }

  get executedSwap(): i32 {
    let value = this.get("executedSwap");
    return value.toI32();
  }

  set executedSwap(value: i32) {
    this.set("executedSwap", Value.fromI32(value));
  }

  get executedIncrease(): i32 {
    let value = this.get("executedIncrease");
    return value.toI32();
  }

  set executedIncrease(value: i32) {
    this.set("executedIncrease", Value.fromI32(value));
  }

  get executedDecrease(): i32 {
    let value = this.get("executedDecrease");
    return value.toI32();
  }

  set executedDecrease(value: i32) {
    this.set("executedDecrease", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class UserData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserData entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserData entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserData", id.toString(), this);
  }

  static load(id: string): UserData | null {
    return store.get("UserData", id) as UserData | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get actionSwapCount(): i32 {
    let value = this.get("actionSwapCount");
    return value.toI32();
  }

  set actionSwapCount(value: i32) {
    this.set("actionSwapCount", Value.fromI32(value));
  }

  get actionMarginCount(): i32 {
    let value = this.get("actionMarginCount");
    return value.toI32();
  }

  set actionMarginCount(value: i32) {
    this.set("actionMarginCount", Value.fromI32(value));
  }

  get actionMintBurnCount(): i32 {
    let value = this.get("actionMintBurnCount");
    return value.toI32();
  }

  set actionMintBurnCount(value: i32) {
    this.set("actionMintBurnCount", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class UserStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserStat", id.toString(), this);
  }

  static load(id: string): UserStat | null {
    return store.get("UserStat", id) as UserStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uniqueCount(): i32 {
    let value = this.get("uniqueCount");
    return value.toI32();
  }

  set uniqueCount(value: i32) {
    this.set("uniqueCount", Value.fromI32(value));
  }

  get uniqueSwapCount(): i32 {
    let value = this.get("uniqueSwapCount");
    return value.toI32();
  }

  set uniqueSwapCount(value: i32) {
    this.set("uniqueSwapCount", Value.fromI32(value));
  }

  get uniqueMarginCount(): i32 {
    let value = this.get("uniqueMarginCount");
    return value.toI32();
  }

  set uniqueMarginCount(value: i32) {
    this.set("uniqueMarginCount", Value.fromI32(value));
  }

  get uniqueMintBurnCount(): i32 {
    let value = this.get("uniqueMintBurnCount");
    return value.toI32();
  }

  set uniqueMintBurnCount(value: i32) {
    this.set("uniqueMintBurnCount", Value.fromI32(value));
  }

  get uniqueCountCumulative(): i32 {
    let value = this.get("uniqueCountCumulative");
    return value.toI32();
  }

  set uniqueCountCumulative(value: i32) {
    this.set("uniqueCountCumulative", Value.fromI32(value));
  }

  get uniqueSwapCountCumulative(): i32 {
    let value = this.get("uniqueSwapCountCumulative");
    return value.toI32();
  }

  set uniqueSwapCountCumulative(value: i32) {
    this.set("uniqueSwapCountCumulative", Value.fromI32(value));
  }

  get uniqueMarginCountCumulative(): i32 {
    let value = this.get("uniqueMarginCountCumulative");
    return value.toI32();
  }

  set uniqueMarginCountCumulative(value: i32) {
    this.set("uniqueMarginCountCumulative", Value.fromI32(value));
  }

  get uniqueMintBurnCountCumulative(): i32 {
    let value = this.get("uniqueMintBurnCountCumulative");
    return value.toI32();
  }

  set uniqueMintBurnCountCumulative(value: i32) {
    this.set("uniqueMintBurnCountCumulative", Value.fromI32(value));
  }

  get actionCount(): i32 {
    let value = this.get("actionCount");
    return value.toI32();
  }

  set actionCount(value: i32) {
    this.set("actionCount", Value.fromI32(value));
  }

  get actionSwapCount(): i32 {
    let value = this.get("actionSwapCount");
    return value.toI32();
  }

  set actionSwapCount(value: i32) {
    this.set("actionSwapCount", Value.fromI32(value));
  }

  get actionMarginCount(): i32 {
    let value = this.get("actionMarginCount");
    return value.toI32();
  }

  set actionMarginCount(value: i32) {
    this.set("actionMarginCount", Value.fromI32(value));
  }

  get actionMintBurnCount(): i32 {
    let value = this.get("actionMintBurnCount");
    return value.toI32();
  }

  set actionMintBurnCount(value: i32) {
    this.set("actionMintBurnCount", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class HourlyAlpStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourlyAlpStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyAlpStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyAlpStat", id.toString(), this);
  }

  static load(id: string): HourlyAlpStat | null {
    return store.get("HourlyAlpStat", id) as HourlyAlpStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get alpSupply(): BigInt {
    let value = this.get("alpSupply");
    return value.toBigInt();
  }

  set alpSupply(value: BigInt) {
    this.set("alpSupply", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }
}

export class AlpStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AlpStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AlpStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AlpStat", id.toString(), this);
  }

  static load(id: string): AlpStat | null {
    return store.get("AlpStat", id) as AlpStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get alpSupply(): BigInt {
    let value = this.get("alpSupply");
    return value.toBigInt();
  }

  set alpSupply(value: BigInt) {
    this.set("alpSupply", Value.fromBigInt(value));
  }

  get aumInUsdg(): BigInt {
    let value = this.get("aumInUsdg");
    return value.toBigInt();
  }

  set aumInUsdg(value: BigInt) {
    this.set("aumInUsdg", Value.fromBigInt(value));
  }

  get distributedEth(): BigInt {
    let value = this.get("distributedEth");
    return value.toBigInt();
  }

  set distributedEth(value: BigInt) {
    this.set("distributedEth", Value.fromBigInt(value));
  }

  get distributedEthCumulative(): BigInt {
    let value = this.get("distributedEthCumulative");
    return value.toBigInt();
  }

  set distributedEthCumulative(value: BigInt) {
    this.set("distributedEthCumulative", Value.fromBigInt(value));
  }

  get distributedUsd(): BigInt {
    let value = this.get("distributedUsd");
    return value.toBigInt();
  }

  set distributedUsd(value: BigInt) {
    this.set("distributedUsd", Value.fromBigInt(value));
  }

  get distributedUsdCumulative(): BigInt {
    let value = this.get("distributedUsdCumulative");
    return value.toBigInt();
  }

  set distributedUsdCumulative(value: BigInt) {
    this.set("distributedUsdCumulative", Value.fromBigInt(value));
  }

  get distributedEsaxn(): BigInt {
    let value = this.get("distributedEsaxn");
    return value.toBigInt();
  }

  set distributedEsaxn(value: BigInt) {
    this.set("distributedEsaxn", Value.fromBigInt(value));
  }

  get distributedEsaxnCumulative(): BigInt {
    let value = this.get("distributedEsaxnCumulative");
    return value.toBigInt();
  }

  set distributedEsaxnCumulative(value: BigInt) {
    this.set("distributedEsaxnCumulative", Value.fromBigInt(value));
  }

  get distributedEsaxnUsd(): BigInt {
    let value = this.get("distributedEsaxnUsd");
    return value.toBigInt();
  }

  set distributedEsaxnUsd(value: BigInt) {
    this.set("distributedEsaxnUsd", Value.fromBigInt(value));
  }

  get distributedEsaxnUsdCumulative(): BigInt {
    let value = this.get("distributedEsaxnUsdCumulative");
    return value.toBigInt();
  }

  set distributedEsaxnUsdCumulative(value: BigInt) {
    this.set("distributedEsaxnUsdCumulative", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get tokenIn(): string {
    let value = this.get("tokenIn");
    return value.toString();
  }

  set tokenIn(value: string) {
    this.set("tokenIn", Value.fromString(value));
  }

  get tokenOut(): string {
    let value = this.get("tokenOut");
    return value.toString();
  }

  set tokenOut(value: string) {
    this.set("tokenOut", Value.fromString(value));
  }

  get amountIn(): BigInt {
    let value = this.get("amountIn");
    return value.toBigInt();
  }

  set amountIn(value: BigInt) {
    this.set("amountIn", Value.fromBigInt(value));
  }

  get amountOut(): BigInt {
    let value = this.get("amountOut");
    return value.toBigInt();
  }

  set amountOut(value: BigInt) {
    this.set("amountOut", Value.fromBigInt(value));
  }

  get amountOutAfterFees(): BigInt {
    let value = this.get("amountOutAfterFees");
    return value.toBigInt();
  }

  set amountOutAfterFees(value: BigInt) {
    this.set("amountOutAfterFees", Value.fromBigInt(value));
  }

  get feeBasisPoints(): BigInt {
    let value = this.get("feeBasisPoints");
    return value.toBigInt();
  }

  set feeBasisPoints(value: BigInt) {
    this.set("feeBasisPoints", Value.fromBigInt(value));
  }

  get tokenInPrice(): BigInt {
    let value = this.get("tokenInPrice");
    return value.toBigInt();
  }

  set tokenInPrice(value: BigInt) {
    this.set("tokenInPrice", Value.fromBigInt(value));
  }

  get transaction(): string {
    let value = this.get("transaction");
    return value.toString();
  }

  set transaction(value: string) {
    this.set("transaction", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class HourlyVolume extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourlyVolume entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyVolume entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyVolume", id.toString(), this);
  }

  static load(id: string): HourlyVolume | null {
    return store.get("HourlyVolume", id) as HourlyVolume | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }
}

export class VolumeStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VolumeStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VolumeStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VolumeStat", id.toString(), this);
  }

  static load(id: string): VolumeStat | null {
    return store.get("VolumeStat", id) as VolumeStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class HourlyVolumeBySource extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save HourlyVolumeBySource entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyVolumeBySource entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyVolumeBySource", id.toString(), this);
  }

  static load(id: string): HourlyVolumeBySource | null {
    return store.get("HourlyVolumeBySource", id) as HourlyVolumeBySource | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }
}

export class HourlyVolumeByToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourlyVolumeByToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyVolumeByToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyVolumeByToken", id.toString(), this);
  }

  static load(id: string): HourlyVolumeByToken | null {
    return store.get("HourlyVolumeByToken", id) as HourlyVolumeByToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenA(): Bytes {
    let value = this.get("tokenA");
    return value.toBytes();
  }

  set tokenA(value: Bytes) {
    this.set("tokenA", Value.fromBytes(value));
  }

  get tokenB(): Bytes {
    let value = this.get("tokenB");
    return value.toBytes();
  }

  set tokenB(value: Bytes) {
    this.set("tokenB", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }
}

export class HourlyFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HourlyFee entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HourlyFee entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HourlyFee", id.toString(), this);
  }

  static load(id: string): HourlyFee | null {
    return store.get("HourlyFee", id) as HourlyFee | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get marginAndLiquidation(): BigInt {
    let value = this.get("marginAndLiquidation");
    return value.toBigInt();
  }

  set marginAndLiquidation(value: BigInt) {
    this.set("marginAndLiquidation", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }
}

export class FeeStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FeeStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FeeStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FeeStat", id.toString(), this);
  }

  static load(id: string): FeeStat | null {
    return store.get("FeeStat", id) as FeeStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get margin(): BigInt {
    let value = this.get("margin");
    return value.toBigInt();
  }

  set margin(value: BigInt) {
    this.set("margin", Value.fromBigInt(value));
  }

  get swap(): BigInt {
    let value = this.get("swap");
    return value.toBigInt();
  }

  set swap(value: BigInt) {
    this.set("swap", Value.fromBigInt(value));
  }

  get marginAndLiquidation(): BigInt {
    let value = this.get("marginAndLiquidation");
    return value.toBigInt();
  }

  set marginAndLiquidation(value: BigInt) {
    this.set("marginAndLiquidation", Value.fromBigInt(value));
  }

  get liquidation(): BigInt {
    let value = this.get("liquidation");
    return value.toBigInt();
  }

  set liquidation(value: BigInt) {
    this.set("liquidation", Value.fromBigInt(value));
  }

  get mint(): BigInt {
    let value = this.get("mint");
    return value.toBigInt();
  }

  set mint(value: BigInt) {
    this.set("mint", Value.fromBigInt(value));
  }

  get burn(): BigInt {
    let value = this.get("burn");
    return value.toBigInt();
  }

  set burn(value: BigInt) {
    this.set("burn", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transaction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transaction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transaction", id.toString(), this);
  }

  static load(id: string): Transaction | null {
    return store.get("Transaction", id) as Transaction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get to(): string {
    let value = this.get("to");
    return value.toString();
  }

  set to(value: string) {
    this.set("to", Value.fromString(value));
  }
}

export class AxnStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AxnStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AxnStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AxnStat", id.toString(), this);
  }

  static load(id: string): AxnStat | null {
    return store.get("AxnStat", id) as AxnStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get distributedEth(): BigInt {
    let value = this.get("distributedEth");
    return value.toBigInt();
  }

  set distributedEth(value: BigInt) {
    this.set("distributedEth", Value.fromBigInt(value));
  }

  get distributedEthCumulative(): BigInt {
    let value = this.get("distributedEthCumulative");
    return value.toBigInt();
  }

  set distributedEthCumulative(value: BigInt) {
    this.set("distributedEthCumulative", Value.fromBigInt(value));
  }

  get distributedUsd(): BigInt {
    let value = this.get("distributedUsd");
    return value.toBigInt();
  }

  set distributedUsd(value: BigInt) {
    this.set("distributedUsd", Value.fromBigInt(value));
  }

  get distributedUsdCumulative(): BigInt {
    let value = this.get("distributedUsdCumulative");
    return value.toBigInt();
  }

  set distributedUsdCumulative(value: BigInt) {
    this.set("distributedUsdCumulative", Value.fromBigInt(value));
  }

  get distributedEsaxn(): BigInt {
    let value = this.get("distributedEsaxn");
    return value.toBigInt();
  }

  set distributedEsaxn(value: BigInt) {
    this.set("distributedEsaxn", Value.fromBigInt(value));
  }

  get distributedEsaxnCumulative(): BigInt {
    let value = this.get("distributedEsaxnCumulative");
    return value.toBigInt();
  }

  set distributedEsaxnCumulative(value: BigInt) {
    this.set("distributedEsaxnCumulative", Value.fromBigInt(value));
  }

  get distributedEsaxnUsd(): BigInt {
    let value = this.get("distributedEsaxnUsd");
    return value.toBigInt();
  }

  set distributedEsaxnUsd(value: BigInt) {
    this.set("distributedEsaxnUsd", Value.fromBigInt(value));
  }

  get distributedEsaxnUsdCumulative(): BigInt {
    let value = this.get("distributedEsaxnUsdCumulative");
    return value.toBigInt();
  }

  set distributedEsaxnUsdCumulative(value: BigInt) {
    this.set("distributedEsaxnUsdCumulative", Value.fromBigInt(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}
