// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class PriceCandle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PriceCandle entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PriceCandle entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PriceCandle", id.toString(), this);
  }

  static load(id: string): PriceCandle | null {
    return store.get("PriceCandle", id) as PriceCandle | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get open(): BigInt {
    let value = this.get("open");
    return value.toBigInt();
  }

  set open(value: BigInt) {
    this.set("open", Value.fromBigInt(value));
  }

  get high(): BigInt {
    let value = this.get("high");
    return value.toBigInt();
  }

  set high(value: BigInt) {
    this.set("high", Value.fromBigInt(value));
  }

  get low(): BigInt {
    let value = this.get("low");
    return value.toBigInt();
  }

  set low(value: BigInt) {
    this.set("low", Value.fromBigInt(value));
  }

  get close(): BigInt {
    let value = this.get("close");
    return value.toBigInt();
  }

  set close(value: BigInt) {
    this.set("close", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get period(): string {
    let value = this.get("period");
    return value.toString();
  }

  set period(value: string) {
    this.set("period", Value.fromString(value));
  }
}

export class ChainlinkPrice extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ChainlinkPrice entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ChainlinkPrice entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ChainlinkPrice", id.toString(), this);
  }

  static load(id: string): ChainlinkPrice | null {
    return store.get("ChainlinkPrice", id) as ChainlinkPrice | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    return value.toI32();
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }
}
